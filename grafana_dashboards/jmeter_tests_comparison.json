{
  "__inputs": [
    {
      "name": "DS_INFLUXDB_- JMETER",
      "label": "InfluxDB - jmeter",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    },
    {
      "name": "VAR_TRANSACTION_MARK",
      "type": "constant",
      "label": "transaction_mark",
      "value": "TR",
      "description": ""
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "10.0.2"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "This dashboard shows live load test metrics provided by JMeter, updated bars charts.",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 14,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "refId": "A"
        }
      ],
      "title": "JMETER",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Current"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 9,
        "x": 0,
        "y": 1
      },
      "id": 2,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 0,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "hide": false,
          "query": "current = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct50.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\"])\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"Median response time\")\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n\r\nbaseline = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct50.0\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\"])\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"Median response time\")\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n\r\njoin(tables: {t1: current, t2: baseline}, on: [\"Metric\"])",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "hide": false,
          "query": "current = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct75.0\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\"])\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"75%-tile response time\")\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n\r\nbaseline = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct75.0\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\"])\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"75%-tile response time\")\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n\r\njoin(tables: {t1: current, t2: baseline}, on: [\"Metric\"])",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "hide": false,
          "query": "current = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct90.0\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\"])\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"90%-tile response time\")\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n\r\nbaseline = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct90.0\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\"])\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"90%-tile response time\")\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n\r\njoin(tables: {t1: current, t2: baseline}, on: [\"Metric\"])",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "hide": false,
          "query": "current = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(\r\n        fn: (r) => if \"request\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> group(columns: [\"statut\"])\r\n  |> sum()\r\n  |> filter(fn: (r) => exists r.statut)\r\n  |> pivot(rowKey: [], columnKey: [\"statut\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with Current: if exists r.ko then (r.ko/r.all*100.0) else 0.0 }))\r\n  |> keep(columns: [\"Current\"])\r\n  |> set(key: \"Metric\", value: \"Errors,%\")\r\n\r\nbaseline = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(\r\n        fn: (r) => if \"request\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> group(columns: [\"statut\"])\r\n  |> sum()\r\n  |> filter(fn: (r) => exists r.statut)\r\n  |> pivot(rowKey: [], columnKey: [\"statut\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with Baseline: if exists r.ko then (r.ko/r.all*100.0) else 0.0 }))\r\n  |> keep(columns: [\"Baseline\"])\r\n  |> set(key: \"Metric\", value: \"Errors,%\")\r\n\r\njoin(tables: {t1: current, t2: baseline}, on: [\"Metric\"])",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "hide": false,
          "query": "current = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(fn: (r) => r[\"transaction\"] !~ /${transaction_mark}/ and r[\"transaction\"] != \"all\")\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: 60s, fn: sum, createEmpty: true)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value / float(v: 60))}))\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"Requests per second\")\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n\r\nbaseline = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(fn: (r) => r[\"transaction\"] !~ /${transaction_mark}/ and r[\"transaction\"] != \"all\")\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: 60s, fn: sum, createEmpty: true)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value / float(v: 60))}))\r\n  |> median()\r\n  |> set(key: \"Metric\", value: \"Requests per second\")\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n\r\njoin(tables: {t1: current, t2: baseline}, on: [\"Metric\"])",
          "refId": "E"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "hide": false,
          "query": "current = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(fn: (r) => r[\"transaction\"] !~ /${transaction_mark}/ and r[\"transaction\"] != \"all\")\r\n  |> group(columns: [\"_field\"])\r\n  |> sum()\r\n  |> set(key: \"Metric\", value: \"Total requests\")\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n\r\nbaseline = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(fn: (r) => r[\"transaction\"] !~ /${transaction_mark}/ and r[\"transaction\"] != \"all\")\r\n  |> group(columns: [\"_field\"])\r\n  |> sum()\r\n  |> set(key: \"Metric\", value: \"Total requests\")\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n\r\njoin(tables: {t1: current, t2: baseline}, on: [\"Metric\"])",
          "refId": "F"
        }
      ],
      "title": "Stats",
      "transformations": [
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Baseline": 1,
              "Current": 2,
              "Metric": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 7,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "displayName": "${__field.labels.testTitle}",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Current test"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline test"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 15,
        "x": 9,
        "y": 1
      },
      "id": 4,
      "interval": "[[aggregation]]s",
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: sum, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value / float(v: $__interval_ms) * 1000.0)}))\r\n  |> set(key: \"testTitle\", value: \"Current test\")\r\n\r\nbaseline_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"count\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: sum, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value / float(v: $__interval_ms) * 1000.0)}))\r\n  |> set(key: \"testTitle\", value: \"Baseline test\")\r\n  |> timeShift(duration: duration(v: uint(v: ${current_startTime}) - uint(v: ${baseline_startTime})))\r\n\r\nunion(tables: [current_data_tr, baseline_data_tr])\r\n|> group(columns: [\"testTitle\"])\r\n|> keep(columns: [\"testTitle\", \"_value\", \"_time\"])",
          "refId": "A"
        }
      ],
      "title": "Throughput ${type} per second",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 7,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "displayName": "${__field.labels.testTitle}",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Current test"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline test"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 0,
        "y": 9
      },
      "id": 5,
      "interval": "[[aggregation]]s",
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct50.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: median, createEmpty: false)\r\n  |> set(key: \"testTitle\", value: \"Current test\")\r\n\r\nbaseline_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct50.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: median, createEmpty: false)\r\n  |> set(key: \"testTitle\", value: \"Baseline test\")\r\n  |> timeShift(duration: duration(v: uint(v: ${current_startTime}) - uint(v: ${baseline_startTime})))\r\n\r\nunion(tables: [current_data_tr, baseline_data_tr])\r\n|> group(columns: [\"testTitle\"])\r\n|> keep(columns: [\"testTitle\", \"_value\", \"_time\"])",
          "refId": "A"
        }
      ],
      "title": "Median ${type} response time",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 7,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "displayName": "${__field.labels.testTitle}",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Current test"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline test"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 8,
        "y": 9
      },
      "id": 6,
      "interval": "[[aggregation]]s",
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct75.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: median, createEmpty: false)\r\n  |> set(key: \"testTitle\", value: \"Current test\")\r\n\r\nbaseline_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct75.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: median, createEmpty: false)\r\n  |> set(key: \"testTitle\", value: \"Baseline test\")\r\n  |> timeShift(duration: duration(v: uint(v: ${current_startTime}) - uint(v: ${baseline_startTime})))\r\n\r\nunion(tables: [current_data_tr, baseline_data_tr])\r\n|> group(columns: [\"testTitle\"])\r\n|> keep(columns: [\"testTitle\", \"_value\", \"_time\"])",
          "refId": "A"
        }
      ],
      "title": "75%-tile ${type} response time",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 7,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "displayName": "${__field.labels.testTitle}",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Current test"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline test"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 16,
        "y": 9
      },
      "id": 22,
      "interval": "[[aggregation]]s",
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct90.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: median, createEmpty: false)\r\n  |> set(key: \"testTitle\", value: \"Current test\")\r\n\r\nbaseline_data_tr = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct90.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_field\", \"_value\", \"_time\"])\r\n  |> aggregateWindow(every: $__interval, fn: median, createEmpty: false)\r\n  |> set(key: \"testTitle\", value: \"Baseline test\")\r\n  |> timeShift(duration: duration(v: uint(v: ${current_startTime}) - uint(v: ${baseline_startTime})))\r\n\r\nunion(tables: [current_data_tr, baseline_data_tr])\r\n|> group(columns: [\"testTitle\"])\r\n|> keep(columns: [\"testTitle\", \"_value\", \"_time\"])",
          "refId": "A"
        }
      ],
      "title": "90%-tile ${type} response time",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Diff,%"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 0.15
                    },
                    {
                      "color": "red",
                      "value": 0.4
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Diff,ms"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 300
                    },
                    {
                      "color": "red",
                      "value": 500
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Current"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 12,
        "x": 0,
        "y": 17
      },
      "id": 9,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 2,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct50.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\", \"transaction\"])\r\n  |> group(columns: [\"transaction\"])\r\n  |> toFloat()\r\n  |> median()\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"transaction\"])\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct50.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\", \"transaction\"])\r\n  |> group(columns: [\"transaction\"])\r\n  |> toFloat()\r\n  |> median()\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current) - float(v: r.Baseline) }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current) / float(v: r.Baseline) - float(v: 1) }))\r\n  |> group()",
          "refId": "A"
        }
      ],
      "title": "Median ${type} response time",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Baseline": 1,
              "Current": 2,
              "Diff,%": 4,
              "Diff,ms": 3,
              "transaction": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Diff,%"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 0.15
                    },
                    {
                      "color": "red",
                      "value": 0.4
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Diff,ms"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 300
                    },
                    {
                      "color": "red",
                      "value": 500
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Current"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 12,
        "x": 12,
        "y": 17
      },
      "id": 11,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 2,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct75.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\", \"transaction\"])\r\n  |> group(columns: [\"transaction\"])\r\n  |> toFloat()\r\n  |> median()\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"transaction\"])\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct75.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\", \"transaction\"])\r\n  |> group(columns: [\"transaction\"])\r\n  |> toFloat()\r\n  |> median()\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current) - float(v: r.Baseline) }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current) / float(v: r.Baseline) - float(v: 1) }))\r\n  |> group()",
          "refId": "A"
        }
      ],
      "title": "75%-tile ${type} response time",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Baseline": 1,
              "Current": 2,
              "Diff,%": 4,
              "Diff,ms": 3,
              "transaction": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB_- JMETER}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Diff,%"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green"
                    },
                    {
                      "color": "#EAB839",
                      "value": 0.15
                    },
                    {
                      "color": "red",
                      "value": 0.4
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Diff,ms"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green"
                    },
                    {
                      "color": "#EAB839",
                      "value": 300
                    },
                    {
                      "color": "red",
                      "value": 500
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Current"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Baseline"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              },
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 12,
        "x": 0,
        "y": 30
      },
      "id": 12,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 2,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB_- JMETER}"
          },
          "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${current_startTime}), stop: time(v: ${current_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct90.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\", \"transaction\"])\r\n  |> group(columns: [\"transaction\"])\r\n  |> toFloat()\r\n  |> median()\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"transaction\"])\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: time(v: ${baseline_startTime}), stop: time(v: ${baseline_endTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"pct90.0\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> filter(fn: (r) => r[\"statut\"] == \"all\")\r\n  |> filter(\r\n        fn: (r) => if \"${type}\" == \"transaction\" then\r\n            r.transaction =~ /${transaction_mark}/\r\n        else\r\n            r.transaction !~ /${transaction_mark}/ and r.transaction != \"all\",\r\n  )\r\n  |> keep(columns: [\"_value\", \"transaction\"])\r\n  |> group(columns: [\"transaction\"])\r\n  |> toFloat()\r\n  |> median()\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current) - float(v: r.Baseline) }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current) / float(v: r.Baseline) - float(v: 1) }))\r\n  |> group()",
          "refId": "A"
        }
      ],
      "title": "90%-tile response time",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Baseline": 1,
              "Current": 2,
              "Diff,%": 4,
              "Diff,ms": 3,
              "transaction": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [
    "comparison",
    "standard listener"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB_- JMETER}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\r\n\r\nschema.tagValues(\r\n    bucket: v.bucket,\r\n    tag: \"testTitle\",\r\n    predicate: (r) => r._measurement == \"events\",\r\n    start: 0,\r\n    stop: now()\r\n  )",
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "testTitle",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\r\n\r\nschema.tagValues(\r\n    bucket: v.bucket,\r\n    tag: \"testTitle\",\r\n    predicate: (r) => r._measurement == \"events\",\r\n    start: 0,\r\n    stop: now()\r\n  )",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 2,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB_- JMETER}"
        },
        "definition": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> min(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "current_startTime",
        "options": [],
        "query": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> min(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB_- JMETER}"
        },
        "definition": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> max(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "current_endTime",
        "options": [],
        "query": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> max(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB_- JMETER}"
        },
        "definition": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: time(v: ${current_startTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"events\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] != \"${testTitle}\")\r\n  |> distinct(column: \"testTitle\")\r\n  |> keep(columns: [\"testTitle\"])\r\n  |> group()",
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "baseline_testTitle",
        "options": [],
        "query": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: time(v: ${current_startTime}))\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"events\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] != \"${testTitle}\")\r\n  |> distinct(column: \"testTitle\")\r\n  |> keep(columns: [\"testTitle\"])\r\n  |> group()",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 2,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB_- JMETER}"
        },
        "definition": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> min(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "baseline_startTime",
        "options": [],
        "query": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> min(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB_- JMETER}"
        },
        "definition": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> max(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))\r\n",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "baseline_endTime",
        "options": [],
        "query": "from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxAT\")\r\n  |> filter(fn: (r) => r[\"testTitle\"] == \"${baseline_testTitle}\")\r\n  |> keep(columns: [\"_time\"])\r\n  |> max(column: \"_time\")\r\n  |> map(fn: (r) => ({ r with _time: string(v: r._time)}))\r\n",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "request",
          "value": "request"
        },
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "type",
        "options": [
          {
            "selected": false,
            "text": "transaction",
            "value": "transaction"
          },
          {
            "selected": true,
            "text": "request",
            "value": "request"
          }
        ],
        "query": "transaction,request",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "5s",
          "value": "5"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "aggregation",
        "options": [
          {
            "selected": true,
            "text": "5s",
            "value": "5"
          },
          {
            "selected": false,
            "text": "10s",
            "value": "10"
          },
          {
            "selected": false,
            "text": "30s",
            "value": "30"
          },
          {
            "selected": false,
            "text": "60s",
            "value": "60"
          },
          {
            "selected": false,
            "text": "5m",
            "value": "300"
          },
          {
            "selected": false,
            "text": "10m",
            "value": "600"
          }
        ],
        "query": "5, 10, 30, 60, 300, 600",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "hide": 2,
        "name": "transaction_mark",
        "query": "${VAR_TRANSACTION_MARK}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_TRANSACTION_MARK}",
          "text": "${VAR_TRANSACTION_MARK}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_TRANSACTION_MARK}",
            "text": "${VAR_TRANSACTION_MARK}",
            "selected": false
          }
        ]
      }
    ]
  },
  "time": {
    "from": "2025-08-13T12:36:18.087Z",
    "to": "2025-08-13T12:46:34.036Z"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m"
    ]
  },
  "timezone": "browser",
  "title": "JMeter Tests comparison",
  "uid": "jmeter-test-comparison",
  "version": 3,
  "weekStart": "monday"
}